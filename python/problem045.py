"""
Project Euler Problem 45

http://projecteuler.net/index.php?section=problems&id=45

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle    T_n = n(n+1)/2    1, 3, 6, 10, 15, ...
Pentagonal  P_n = n(3n-1)/2   1, 5, 12, 22, 35, ...
Hexagonal   H_n = n(2n-1)     1, 6, 15, 28, 45, ...

It can be verified that T_285 = P_165 = H_143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""


def triangular_numbers_generator(n):
    """
    Yields triangular numbers, starting with the n'th.
    """
    while True:
        yield n * (n+1) / 2
        n += 1

def pentagonal_numbers_generator(n):
    """
    Yields pentagonal numbers, starting with the n'th.
    """
    while True:
        yield n * (3*n-1) / 2
        n += 1

def hexagonal_numbers_generator(n):
    """
    Yields hexagonal numbers, starting with the n'th.
    """
    while True:
        yield n * (2*n-1)
        n+=1

def solution():
    """
    T_285 = P_165 = H_143 = 40755, so start at T_286, P_166, H_144

    For each triangular number t, generate pentagonal numbers until we
    have a pentagonal number p that is greater than or equal to
    t. Similarly, generate hexagonal numbers until we have a hexagonal
    number h that is greater than or equal to h. 

    If t == p == h, we have found the solution.
    """
    T_START = 286
    P_START = 166
    H_START = 144

    pent_numbers = pentagonal_numbers_generator(P_START)
    p = next(pent_numbers)
    hex_numbers = hexagonal_numbers_generator(H_START)
    h = next(hex_numbers)

    for t in triangular_numbers_generator(T_START):
        while t > p:
            p = next(pent_numbers)
        while t > h:
            h = next(hex_numbers)
        if t == p and t == h:
            return t

if __name__ == "__main__":
    print solution()
